{"version":3,"sources":["components/button.jsx","components/alarm.jsx","components/timer.jsx","App.js","serviceWorker.js","index.js","assests/autotune.mp3"],"names":["Button","btn_label","btn_function","style","className","onClick","Alarm","url","soundfile","playStatus","Sound","status","PLAYING","Timer","useState","minutes","setMinutes","seconds","setSeconds","isTimerOn","setIsTimerOn","setPlayStatus","toggle","console","log","useEffect","tikTok","setInterval","s","m","clearInterval","alert","id","display","type","min","max","value","onChange","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uNAceA,MAZf,YAAmD,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,aAAcC,EAAQ,EAARA,MAKtC,OACI,yBAAKC,UAAU,aAAaD,MAAOA,GAC/B,4BAAQC,UAAU,SAASC,QANnC,WACIH,MAKsDD,K,gCCK/CK,MAVf,WAII,OACI,kBAAC,IAAD,CAAOC,IAAKC,IACZC,WAAYC,IAAMC,OAAOC,WC6ElBC,MAnFf,YAAsB,EAANN,IAAO,IAAD,EACYO,mBAAS,GADrB,mBACXC,EADW,KACFC,EADE,OAEYF,mBAAS,GAFrB,mBAEXG,EAFW,KAEFC,EAFE,OAGgBJ,oBAAS,GAHzB,mBAGXK,EAHW,KAGAC,EAHA,OAIkBN,mBAAS,QAJ3B,mBAICO,GAJD,WAQlB,SAASC,IACLF,GAAcD,GA+ClB,OAlDAI,QAAQC,IAAI,eAAgBL,GAoB5BM,qBAAU,WACN,IAAIC,EAAS,KA0Bb,OAxBIP,EACAO,EAASC,aAAY,WACjB,GAAIV,EAAU,IAAMA,EAAU,GAAiB,IAAZF,EAC/BG,GAAW,SAAAU,GAAC,OAAIX,EAAU,UACvB,GAAIF,EAAU,GAAiB,IAAZE,EACtBD,GAAW,SAAAa,GAAC,OAAId,EAAU,KAC1BG,EAAW,SACR,GAAIH,EAAU,GAAKE,EAAU,EAChCC,GAAW,SAAAU,GAAC,OAAIX,EAAU,UACvB,GAAgB,IAAZF,GAA6B,IAAZE,EAQxB,OAPAI,EAAc,WAEdS,cAAcJ,GACdV,EAAW,GACXE,EAAW,GACXE,GAAa,GACbW,MAAM,sBACG,kBAAC,EAAD,QAEd,MACKZ,IAAcJ,EAAU,GAAKE,EAAU,IAC/Ca,cAAcJ,GAGX,kBAAMI,cAAcJ,MAC5B,CAACP,EAAWF,EAASF,IAGpB,oCACI,wBAAIiB,GAAG,MAAP,kBAGA,yBAAK5B,UAAU,YAAYD,MAAOgB,EAAW,CAACc,QAAS,QAAU,CAACA,QAAS,UACvE,2BAAOC,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,MAAOtB,EAASuB,SAAU,SAAAC,GAAMvB,EAAWuB,EAAEC,OAAOH,QAASjC,UAAU,UAC7G,2BAAOA,UAAU,SAAjB,KACA,2BAAO8B,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,MAAOpB,EAASqB,SAAU,SAAAC,GAAMrB,EAAWqB,EAAEC,OAAOH,QAASjC,UAAU,WAEjH,yBAAKA,UAAU,aACVW,EAAU,GAAI,IAAMA,EAAUA,EADnC,IAC6CE,EAAU,GAAI,IAAMA,EAAUA,GAE3E,kBAAC,EAAD,CAAQf,aAAcoB,EAAQrB,UAAWkB,EAAW,QAAU,UAC9D,kBAAC,EAAD,CAAQjB,aA1DhB,WACQiB,IACAE,EAAc,QAEdL,EAAW,GACXE,EAAW,GACXI,MAoD4BrB,UAAU,OAAOE,MAAOgB,EAAW,CAACc,QAAQ,SAAW,CAACA,QAAQ,UAC5F,kBAAC,EAAD,CAAQ/B,aAjDhB,WACIc,GAAW,kBAAMD,EAAU,MAgDad,UAAU,UC5D3CwC,MAVf,WAGE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCEcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.71649bc3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Button({btn_label, btn_function, style}) {\n    function handleClick() {\n        btn_function()\n    }\n\n    return (\n        <div className=\"button-div\" style={style}>\n            <button className=\"button\" onClick={handleClick}>{btn_label}</button>\n        </div>\n    )\n}\n\nexport default Button;\n\n","import React, { useState } from 'react';\nimport Sound from 'react-sound';\nimport soundfile from '../assests/autotune.mp3'\n\nfunction Alarm() {\n    // const [playStatus, setPlayStatus] = useState('STOP')\n\n\n    return (\n        <Sound url={soundfile} \n        playStatus={Sound.status.PLAYING}/>\n    )\n}\n\nexport default Alarm;","import React, { useState, useEffect } from 'react';\nimport Button from './button';\nimport Alarm from './alarm';\n\nfunction Timer({url}) {\n    const [minutes, setMinutes] = useState(0);\n    const [seconds, setSeconds] = useState(0);\n    const [isTimerOn, setIsTimerOn] = useState(false);\n    const [playStatus, setPlayStatus] = useState('STOP')\n    // const [play, togglePlay] = new Alarm(url)\n    console.log('is timer on?', isTimerOn);\n\n    function toggle() {\n        setIsTimerOn(!isTimerOn);\n    }\n\n    function stop() {\n        if (isTimerOn) {\n            setPlayStatus('STOP');\n            // togglePlay()\n            setMinutes(0);\n            setSeconds(0);\n            toggle();\n        }\n    }\n\n    function addOneMinute() {\n        setMinutes(() => minutes + 1)\n    }\n\n    useEffect(() => {\n        let tikTok = null;\n        \n        if (isTimerOn) {\n            tikTok = setInterval(() => {\n                if (seconds < 60 && seconds > 0 && minutes === 0) {\n                    setSeconds(s => seconds - 1);\n                } else if (minutes > 0 && seconds === 0 ) {\n                    setMinutes(m => minutes - 1);\n                    setSeconds(59);\n                } else if (minutes > 0 && seconds > 0) {\n                    setSeconds(s => seconds - 1);\n                } else if (minutes === 0 && seconds === 0) {\n                    setPlayStatus('PLAYING')\n                    // togglePlay();\n                    clearInterval(tikTok);\n                    setMinutes(0);\n                    setSeconds(0);\n                    setIsTimerOn(false);\n                    alert('COFFEE IS READY!!!')\n                    return ( <Alarm />)\n                }\n            }, 1000);\n        } else if (!isTimerOn && (minutes > 0 || seconds > 0)) {\n            clearInterval(tikTok);\n        }\n\n        return () => clearInterval(tikTok);\n    }, [isTimerOn, seconds, minutes])\n\n    return (\n        <>\n            <h3 id=\"h3\">\n                SET YOUR TIME:\n            </h3>\n            <div className=\"input-div\" style={isTimerOn? {display: \"none\"} : {display: \"block\"}}>\n                <input type=\"number\" min=\"0\" max=\"59\" value={minutes} onChange={e => {setMinutes(e.target.value)}} className=\"input\"/>\n                <label className=\"input\">:</label>\n                <input type=\"number\" min=\"0\" max=\"59\" value={seconds} onChange={e => {setSeconds(e.target.value)}} className=\"input\"/>\n            </div>\n            <div className=\"countdown\">\n                {minutes < 10? '0' + minutes : minutes}:{seconds < 10? '0' + seconds : seconds}\n            </div>\n            <Button btn_function={toggle} btn_label={isTimerOn? 'PAUSE' : 'START'}/>\n            <Button btn_function={stop} btn_label='STOP' style={isTimerOn? {display:\"block\"} : {display:\"none\"}}/>\n            <Button btn_function={addOneMinute} btn_label=\"+1'\"/>\n            {/* <audio>\n                <source src={url} samesite=\"Secure\"></source>\n            </audio> */}\n            {/* <div className=\"message-div\" style={play? {display: \"block\"} : {display:\"none\"}}>\n                <h3 id=\"message-id\">to turn off the music press STOP button</h3>\n            </div> */}\n        </>\n    )\n\n}\n\nexport default Timer;\n\n","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer';\n\n\nfunction App() {\n  // const url = \"https://www.youtube.com/watch?v=zUwEIt9ez7M\"\n  // const url = 'https://soundcloud.com/karleusa/11-jelena-karleusa-so-feat'\n  return (\n    <div className=\"App\">\n      <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/autotune.76af347e.mp3\";"],"sourceRoot":""}